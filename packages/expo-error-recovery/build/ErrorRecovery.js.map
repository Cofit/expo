{"version":3,"file":"ErrorRecovery.js","sourceRoot":"","sources":["../src/ErrorRecovery.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AACvD,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AAEpD,MAAM,oBAAoB,GAAG,CAAC,GAAG,EAAE;IACjC,IAAI,WAAW,GAAG,KAAK,CAAC;IACxB,OAAO;QACL,IAAI,CAAC,WAAW,EAAE;YAChB,WAAW,GAAG,IAAI,CAAC;YACnB,MAAM,aAAa,GAAG,UAAU,CAAC,gBAAgB,EAAE,CAAC;YACpD,oCAAoC;YACpC,iIAAiI;YACjI,UAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;gBACnD,MAAM,iBAAiB,CAAC,iBAAiB,EAAE,CAAC;gBAC5C,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC;AACJ,CAAC,CAAC,EAAE,CAAC;AAEL,MAAM,CAAC,MAAM,MAAM,GAAG,kBAAkB,EAAE,CAAC;AAE3C,MAAM,UAAU,gBAAgB,CAAC,KAA6B;IAC5D,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAAE;QACvC,MAAM,IAAI,mBAAmB,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC;KACpE;IACD,iBAAiB,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1D,oBAAoB,EAAE,CAAC;AACzB,CAAC;AAED,SAAS,kBAAkB;IACzB,IAAI,iBAAiB,CAAC,MAAM,EAAE;QAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;KAC7C;IACD,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nconst globalHandlerSwapper = (() => {\n  let wasExecuted = false;\n  return function () {\n    if (!wasExecuted) {\n      wasExecuted = true;\n      const globalHandler = ErrorUtils.getGlobalHandler();\n      // ErrorUtlis came from react-native\n      // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n      ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n        await ExpoErrorRecovery.saveRecoveryProps();\n        globalHandler(error, isFatal);\n      });\n    }\n  };\n})();\n\nexport const errors = _parseNativeErrors();\n\nexport function setRecoveryProps(props: { [key: string]: any }): void {\n  if (!ExpoErrorRecovery.setRecoveryProps) {\n    throw new UnavailabilityError('ErrorRecovery', 'setRecoveryProps');\n  }\n  ExpoErrorRecovery.setRecoveryProps(JSON.stringify(props));\n  globalHandlerSwapper();\n}\n\nfunction _parseNativeErrors(): { [key: string]: any } | undefined {\n  if (ExpoErrorRecovery.errors) {\n    return JSON.parse(ExpoErrorRecovery.errors);\n  }\n  return undefined;\n}\n"]}